name: Docker

on:
  push:
    branches:
      - main

    tags:
      - v*

  schedule:
    - cron: "0 4 * * *"

env:
  IMAGE_NAME: tdlib-docker

jobs:
  check:
    outputs:
      update: ${{ steps.check.outputs.update }}
      commit_id: ${{ steps.check.outputs.commit_id }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get TDLib last commit id
        run: |
          wget --header="Accept: application/vnd.github.VERSION.sha" -qO tdlib_commit_id  $GITHUB_API_URL/repos/tdlib/td/commits/master

      - name: Get short commit id
        run: git rev-parse --short "$(<tdlib_commit_id)" > tdlib_commit_id

      - name: Check if commit ID is different
        id: check
        run: |
          if [[ "$(<tdlib_commit_id)" != "$(<TDLib.txt)" ]]; then
            echo "::set-output name=update::1"
            echo "::set-output name=commit_id::$(<tdlib_commit_id)"
          else
            echo "::set-output name=update::0"
          fi

  update:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.update == 1

    steps:
      - uses: actions/checkout@v2

      - name: Update TDLib commit ID
        run: echo "${{ needs.check.outputs.commit_id }}" > TDLib.txt
      - name: Create commit
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          git add TDLib.txt
          git -c user.name="GitHub Actions" -c user.email="actions@github.com" commit --allow-empty -m "Update TDLib" --author="${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          git push

  push-alpine:
    runs-on: ubuntu-latest
    needs: update

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile.alpine --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:alpine
          docker push $IMAGE_ID:alpine
          docker create --name $IMAGE_NAME $IMAGE_ID:$VERSION

      - name: Get TDLib binary from image
        run: |
          docker cp --follow-link $IMAGE_NAME:/usr/local/lib/libtdjson.so .

      - name: Generate artifact for TDLib binary
        uses: actions/upload-artifact@v2
        with:
          name: libtdjson-alpine.so
          path: libtdjson.so

  push-debian:
    runs-on: ubuntu-latest
    needs: update

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile.debian --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          VERSION+="-debian"

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:debian
          docker push $IMAGE_ID:debian
          docker create --name $IMAGE_NAME $IMAGE_ID:$VERSION

      - name: Get TDLib binary from image
        run: |
          docker cp --follow-link $IMAGE_NAME:/usr/local/lib/libtdjson.so .

      - name: Generate artifact for TDLib binary
        uses: actions/upload-artifact@v2
        with:
          name: libtdjson-debian.so
          path: libtdjson.so
